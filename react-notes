
** This crazy mix of JS and html is JSX >> Javascript XML syntax transform. 
<script type="text/jsx">
	ReactDOM.render(
		<h1>Hello, world!</h1>,
		document.getElementById("myDiv")
	)
</script>

When using the ReactDOM's render method, our first argument is the component we want to render, and the second is the DOM node it should mount to. We can use the createCall method to create custome component classes. It takes an object of specifications as it's argument.

var MyComponent = React.createCall({
	render: function (){
		return(
			<h1>Hello, world!</h1>
		)
	}
})

After creating a class we can render it to our document like so:

ReactDOM.render(
	<MyComponent/>,
	document.getElementById('myDiv')	
)

PROPS: When we use our defined components, we can add attributes called props. These attributes are available in our component as this.props and can be used in our render method to render dynamic data: 

var MyComponent = React.createClass({
	render: function(){
		return (
			<h1>Hello, {this.props.name}!</h1>
		)
	}
})

ReactDOM.render(<MyComponent name="Handsome" />, document.getElementById('myDiv'));

STATE: Every component has a state object and a props object. State is set using the setState method. Calling setState triggers UI updates and is the bread and butter of React's interactivity. 

EVENTS: React also has a built in cross browser events system. The events are attached as properties of components and can trigger methods. Lets make our count increment below using events.




               <!--          <datalist id="cars">
                          {carBrands.map(function(brand){
                            return <option value={brand} key={brand} />
                          })}
                        </datalist>  -->






           {this.props.list.map(function(brands){
                            return <p>{brands}</p>
                         })}
        return list
        },










      carList: function(carName){
        var listCars = this.props.list
        var textEntered = this.state.value
        if(textEntered !== ""){
        return listCars.map(function(car){
            return <li>{car}</li>
          }).filter(function(name){
          return <li>name === textEntered</li>
          })
        }
      },

      render: function(){
        return ( <div>
                    <h3>Type your favorite car: </h3>
                      <input type="text" onChange={this.textChange} value={this.state.value} />
                    <div>
                      <ul>
                        {this.carList()}
                      </ul>
                    </div>
                  </div> 
                )
      }

      });




